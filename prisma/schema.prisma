// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  Order     Order[]
  addresses Address[]
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Decimal     @db.Decimal(10, 2) // Garantir duas casas decimais!
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  OrderItem  OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  products    OrderItem[]
  subtotal    Decimal     @db.Decimal(10, 2) // Total dos produtos antes da taxa
  deliveryFee Decimal     @db.Decimal(10, 2) // Valor da taxa de entrega
  total       Decimal     @db.Decimal(10, 2) // Total final (subtotal + taxa)
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  quantity        Int
  priceAtPurchase Decimal @db.Decimal(10, 2) // Garantir duas casas decimais!
}

model Address {
  id     String  @id @default(uuid())
  street String
  city   String
  state  String
  zip    String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  orders Order[]
}
